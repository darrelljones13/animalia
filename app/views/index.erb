
<div class="kingdom">
	<script src="http://d3js.org/d3.v3.min.js"></script>
	<script>

	var margin = 20
	    diameter = (window.innerWidth)/2;

	var color = d3.scale.linear()
	    .domain([-1, 5])
	    .range(["hsl(152,80%,80%)", "hsl(228,30%,40%)"])
	    .interpolate(d3.interpolateHcl);

	var pack = d3.layout.pack()
	    .padding(2)
	    .size([diameter - margin, diameter - margin])
	    .value(function(d) { return d.size; })

	var svg = d3.select(".container").append("svg")
	    .attr("width", "100%")
	    .attr("height", diameter) 
	  	.append("g")
	    .attr("transform", "translate(" + diameter / 2 + "," + diameter / 2 + ")");

	d3.json("tree.json", function(error, root) {
	  if (error) return console.error(error);

	  var focus = root,
	      nodes = pack.nodes(root),
	      view;

	  var circle = svg.selectAll("circle")
	      .data(nodes)
	    .enter().append("circle")
	      .attr("class", function(d) { return d.parent ? d.children ? "node" : "node node--leaf" : "node node--root"; })
	      .style("fill", function(d) { return d.children ? color(d.depth) : null; })
	      .on("click", function(d) { if (focus !== d) zoom(d), d3.event.stopPropagation(); });

	  var text = svg.selectAll("text")
	      .data(nodes)
	   	 .enter().append("text")
	      .attr("class", "label")
	      .style("fill-opacity", function(d) { return d.parent === root ? 1 : 0; })
	      .style("display", function(d) { return d.parent === root ? null : "none"; })
	      .text(function(d) { return d.name; });

	  var node = svg.selectAll("circle,text");

	  d3.select("container")
	      .style("background", color(-1))
	      .on("click", function() { zoom(root); });

	  zoomTo([root.x-(window.innerWidth/4), root.y, root.r * 2 + margin]);

	  function zoom(d) {
	    var focus0 = focus; focus = d;

	    var transition = d3.transition()
	        .duration(d3.event.altKey ? 7500 : 750)
	        .tween("zoom", function(d) {
	          var i = d3.interpolateZoom(view, [focus.x, focus.y, focus.r * 2 + margin]);
	          return function(t) { zoomTo(i(t)); };
	        });

	    transition.selectAll("text")
	      .filter(function(d) { return d.parent === focus || this.style.display === "inline"; })
	        .style("fill-opacity", function(d) { return d.parent === focus ? 1 : 0; })
	        .each("start", function(d) { if (d.parent === focus) this.style.display = "inline"; })
	        .each("end", function(d) { if (d.parent !== focus) this.style.display = "none"; });
	  }

	  function zoomTo(v) {
	    var k = diameter / v[2]; view = v;
	    node.attr("transform", function(d) { return "translate(" + (d.x - v[0]) * k + "," + (d.y - v[1]) * k + ")"; });
	    circle.attr("r", function(d) { return d.r * k; });
	  }
	});

	d3.select(self.frameElement).style("height", diameter + "px");

	// vis.selectAll("circle")
 //    .data(nodes)
 //   .enter()
 //    .append("svg:circle")
 //    .attr("class", function(d) {
 //        return d.children ? "parent" : "child";
 //    })
 //    .attr("cx", function(d) {
 //        return d.x;
 //    })
 //    .attr("cy", function(d) {
 //        return d.y;
 //    })
 //    .attr("r", function(d) {
 //        return d.r;
 //    })
 //    .on("click", function(d) {
 //        zoom(node == d ? root : d);
 //    })
 //    .append("svg:title")
 //    .text("test");        

	// div.tooltip {
	// 	position: absolute;
	// 	text-align: center;
	// 	width: 60px;
	// 	height: 28px;
	// 	padding: 2px;
	// 	font: 12px sans-serif;
	// 	background: lightsteelblue;
	// 	border: 0px;
	// 	border-radius: 8px;
	// 	pointer-events: none;
	// }

	</script>

</div>

<script>
	function overlay() {
		el = document.getElementById("overlay");
		el.style.visibility = (el.style.visibility == "visible") ? "hidden" : "visible";
	}
</script>

<div id="overlay">
	<div class="dark-matter"></div>

	<div class="search-form">
		<form id="species-search" action="/species/search" method="POST">
			<input id="species-input" type="text" name="species" placeholder="find a species" />
		  	<input type="submit" value="Search" />
		  	<br>
		  	<a href='#' onclick='overlay()'>Back to browsing!</a>
		</form>
	</div>
</div>
